import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Jogo da Velha',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Jogo da Velha'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<String> board = List.filled(9, '');
  bool playerTurn = true; // true for 'X', false for 'O'
  String result = '';

  void _resetBoard() {
    setState(() {
      board = List.filled(9, '');
      playerTurn = true;
      result = '';
    });
  }

  void _makeMove(int index) {
    if (board[index] == '' && result == '') {
      setState(() {
        board[index] = playerTurn ? 'X' : 'O';
        playerTurn = !playerTurn;
        _checkWinner();
        if (!playerTurn && result == '') {
          _computerMove();
        }
      });
    }
  }

  void _computerMove() {
    List<int> availableMoves = [];
    for (int i = 0; i < board.length; i++) {
      if (board[i] == '') {
        availableMoves.add(i);
      }
    }
    if (availableMoves.isNotEmpty) {
      int move = availableMoves[0]; // Simple AI: choose the first available move
      setState(() {
        board[move] = 'O';
        playerTurn = true;
        _checkWinner();
      });
    }
  }

  void _checkWinner() {
    List<List<int>> winPositions = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
      [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
      [0, 4, 8], [2, 4, 6]  // diagonals
    ];

    for (var pos in winPositions) {
      if (board[pos[0]] != '' &&
          board[pos[0]] == board[pos[1]] &&
          board[pos[1]] == board[pos[2]]) {
        setState(() {
          result = '${board[pos[0]]} venceu!';
        });
        return;
      }
    }

    if (!board.contains('')) {
      setState(() {
        result = 'Empate!';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            GridView.builder(
              shrinkWrap: true,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
              ),
              itemCount: 9,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => _makeMove(index),
                  child: Container(
                    margin: const EdgeInsets.all(4.0),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black),
                    ),
                    child: Center(
                      child: Text(
                        board[index],
                        style: const TextStyle(fontSize: 32.0),
                      ),
                    ),
                  ),
                );
              },
            ),
            const SizedBox(height: 20),
            Text(
              result,
              style: const TextStyle(fontSize: 24.0),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resetBoard,
              child: const Text('Reiniciar'),
            ),
          ],
        ),
      ),
    );
  }
}
